AWSTemplateFormatVersion: "2010-09-09"
Description: "This CloudFormation template creates resources required for 'talk-to-your-slide-deck' approach1"

Resources:
  OSPolicy:
    Type: "AWS::IAM::RolePolicy"
    Properties:
      PolicyName: "ospolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "aoss:APIAccessAll"
              - "aoss:DashboardsAccessAll"
              - "aoss:BatchGetCollection"
            Resource: "*"
      RoleName: !Ref OSPipelineExecutionRole

  S3Policy:
    Type: "AWS::IAM::RolePolicy"
    DependsOn: SQSQueue
    Properties:
      PolicyName: "s3policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Sid: "ReadFromS3"
          Effect: "Allow"
          Action: "s3:GetObject"
          Resource:
          - "arn:aws:s3:::sagemaker*"
        - Sid: "ReceiveAndDeleteSqsMessages"
          Effect: "Allow"
          Action:
          - "sqs:DeleteMessage"
          - "sqs:ReceiveMessage"
          - "sqs:ChangeMessageVisibility"
          Resource: !GetAtt SQSQueue.Arn
      RoleName: !Ref OSPipelineExecutionRole

  SecurityPolicy: 
    Type: "AWS::OpenSearchServerless::SecurityPolicy" 
    Properties: 
      Name: "encryptionpolicy"
      Type: "encryption" 
      Description: Encryption policy for test collections 
      Policy: >-
                {"Rules":[{"ResourceType":"collection","Resource":["collection/multimodaloscollection"]}],"AWSOwnedKey":true}

  DataAccessAdminPolicy:
    Type: "AWS::OpenSearchServerless::AccessPolicy"
    Properties:
      Name: "dataaccessadminpolicy"
      Type: "data"
      Policy: !Sub >-
                [{"Description": "Data Admin access", "Rules": [{"ResourceType": "index", "Resource": ["index/*/*"], "Permission": ["aoss:*"]},
                {"ResourceType": "collection", "Resource": ["collection/multimodaloscollection"], "Permission": ["aoss:*"]}],
                "Principal": ["arn:aws:iam::${AWS::AccountId}:role/Admin"]}]

  DataAccessPolicy:
    Type: "AWS::OpenSearchServerless::AccessPolicy"
    Properties:
      Name: "dataaccesspolicy"
      Type: "data"
      Policy: !Sub >-
          [{"Description": "Data access", "Rules": [{"ResourceType": "index", "Resource": ["index/*/*"], "Permission": ["aoss:*"]}],
          "Principal": ["${SMExecutionRole.Arn}", "${OSPipelineExecutionRole.Arn}"]}]

  SQSQueuePolicy: 
    Type: AWS::SQS::QueueInlinePolicy
    Properties: 
      Queue: !Ref SQSQueue
      PolicyDocument: 
        Statement: 
          Action: 
            - "SQS:SendMessage" 
            - "SQS:ReceiveMessage"
          Effect: "Allow"
          Resource: !Sub ${SQSQueue.Arn}
          Principal:  
            Service: "s3.amazonaws.com"
          Condition:
              StringEquals:
                aws:SourceAccount: !Sub ${AWS::AccountId}
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:s3:*:*:sagemaker-${AWS::Region}-${AWS::AccountId}"

  SMExecutionRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "sagemaker.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSageMakerFullAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonS3FullAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonOpenSearchServiceFullAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonBedrockFullAccess"

  OSPipelineExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "osis-pipelines.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      # ManagedPolicyArns:
      # - !Ref OSPolicy
      # - !Ref S3Policy

  SQSQueue: 
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: "InputfromS3"

  MultimodalNotebookInstance:
    Type: "AWS::SageMaker::NotebookInstance"
    Properties:
      InstanceType: "ml.t3.xlarge"
      RoleArn: !GetAtt SMExecutionRole.Arn
      DefaultCodeRepository: "https://github.com/aarora79/multimodal.git"

  MultimodalCollection:
    Type: "AWS::OpenSearchServerless::Collection"
    Properties:
      Name: "multimodaloscollection"
      Type: "VECTORSEARCH"
      Description: "Embeddings collection"
    DependsOn: [SecurityPolicy, DataAccessAdminPolicy, DataAccessPolicy] #, NetworkPolicy]

  MultimodalPipeline:
      Type: "AWS::OSIS::Pipeline"
      Properties:
        LogPublishingOptions:
          IsLoggingEnabled: true
          CloudWatchLogDestination:
            LogGroup: "/aws/vendedlogs/multimodalpipeline"
        MinUnits: 3
        MaxUnits: 9
        PipelineConfigurationBody: !Sub |
          version: "2"
          s3-pipeline:
            source:
              s3:
                notification_type: "sqs"
                codec:
                  json:
                sqs:
                  queue_url: ${SQSQueue}
                compression: "none"
                aws:
                  region: ${AWS::Region}
                  sts_role_arn: ${OSPipelineExecutionRole}
            processor:
            - date:
                destination: "@timestamp"
                from_time_received: true
            sink:
            - opensearch:
                hosts: [${MultimodalCollection.CollectionEndpoint}]
                index: "multimodalslidesindex"
                aws:
                  serverless: true
                  sts_role_arn: ${OSPipelineExecutionRole}
                  region: ${AWS::Region}
        PipelineName: "multimodalpipeline"
Outputs:
  MultimodalNotebookInstanceId:
    Value: !Ref MultimodalNotebookInstance
  SQSQueueARN: 
    Description: "InputfromS3 SQS Queue ARN"
    Value: 
      !GetAtt SQSQueue.Arn
  SQSQueueURL: 
    Description: "InputfromS3 SQS Queue URL"
    Value: 
      !Ref SQSQueue
  MultimodalCollectionEndpoint:
    Value: 
      !GetAtt MultimodalCollection.CollectionEndpoint
